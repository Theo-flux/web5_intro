"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsiValidator = void 0;
var verifiable_credential_js_1 = require("./verifiable-credential.js");
var utils_js_1 = require("./utils.js");
var verifiable_presentation_js_1 = require("./verifiable-presentation.js");
var SsiValidator = /** @class */ (function () {
    function SsiValidator() {
    }
    SsiValidator.validateCredentialPayload = function (vc) {
        this.validateContext(vc.vcDataModel['@context']);
        this.validateVcType(vc.type);
        this.validateCredentialSubject(vc.vcDataModel.credentialSubject);
        if (vc.vcDataModel.issuanceDate)
            this.validateTimestamp(vc.vcDataModel.issuanceDate);
        if (vc.vcDataModel.expirationDate)
            this.validateTimestamp(vc.vcDataModel.expirationDate);
    };
    SsiValidator.validateContext = function (value) {
        var input = this.asArray(value);
        if (input.length < 1 || input.indexOf(verifiable_credential_js_1.DEFAULT_VC_CONTEXT) === -1) {
            throw new Error("@context is missing default context \"".concat(verifiable_credential_js_1.DEFAULT_VC_CONTEXT, "\""));
        }
    };
    SsiValidator.validateVcType = function (value) {
        var input = this.asArray(value);
        if (input.length < 1 || input.indexOf(verifiable_credential_js_1.DEFAULT_VC_TYPE) === -1) {
            throw new Error("type is missing default \"".concat(verifiable_credential_js_1.DEFAULT_VC_TYPE, "\""));
        }
    };
    SsiValidator.validateVpType = function (value) {
        var input = this.asArray(value);
        if (input.length < 1 || input.indexOf(verifiable_presentation_js_1.DEFAULT_VP_TYPE) === -1) {
            throw new Error("type is missing default \"".concat(verifiable_presentation_js_1.DEFAULT_VP_TYPE, "\""));
        }
    };
    SsiValidator.validateCredentialSubject = function (value) {
        if (Object.keys(value).length === 0) {
            throw new Error("credentialSubject must not be empty");
        }
    };
    SsiValidator.validateTimestamp = function (timestamp) {
        if (!(0, utils_js_1.isValidXmlSchema112Timestamp)(timestamp) && !(0, utils_js_1.isValidRFC3339Timestamp)(timestamp)) {
            throw new Error("timestamp is not valid xml schema 112 timestamp");
        }
    };
    SsiValidator.asArray = function (arg) {
        return Array.isArray(arg) ? arg : [arg];
    };
    return SsiValidator;
}());
exports.SsiValidator = SsiValidator;
//# sourceMappingURL=validators.js.map